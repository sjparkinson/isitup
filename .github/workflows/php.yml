name: PHP

on:
  - push
  - pull_request

jobs:
  psalm:
    name: Psalm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP, with Composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: ctype, curl, iconv, json, pcre, session, simplexml, tokenizer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer packages
        uses: actions/cache@v2.1.5
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - run: composer install --no-progress

      - run: php vendor/bin/psalm --output-format=github --long-progress
      
  phpunit:
    name: PHPUnit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP, with Composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: ctype, curl, iconv, json, pcre, session, simplexml, tokenizer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer packages
        uses: actions/cache@v2.1.5
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - run: composer validate --strict
      
      - run: composer install --no-progress
      
      - run: php bin/phpunit install

      - run: composer test

  deploy:
    name: Deploy
    environment:
      name: production
      url: https://isitup.org
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: phpunit
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create Apps Platform deployment
        id: deployment
        run: doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --force-rebuild --wait

      - name: Get build logs
        if: ${{ always() }}
        run: doctl apps logs ${{ secrets.DIGITALOCEAN_APP_ID }} --type build
